<% if(data.isDev) { %>
    <div id="log" style="background-color: black; user-select:text; font-family: monospace; min-height: 1ch; max-height: min(35ch, 85vh); overflow: auto; margin: 10px; margin-bottom: 0; overflow-wrap: break-word; padding: 1ch; border: 2px solid darkgray; border-radius: 1ch 1ch 0 0"></div>
    <input type="text" id="devConsole" placeholder="> Input command here" style="width: calc(100% - 20px); margin-left: 10px; margin-bottom: 30px; border-radius: 0 0 1ch 1ch; padding: 0 0.25ch 0.15ch 0.25ch;"/>
    
    <script>
        // escapes any text and makes it safe to display in an HTML page
        // this is needed because otherwise if we console.log a button, for example, it would just display the button
        // also puts URLs into anchor tags
        var escapeHtml = (unsafe) => {
            return String(unsafe).replace(/&/g, "&amp;")
                                 .replace(/</g, "&lt;")
                                 .replace(/>/g, "&gt;")
                                 .replace(/"/g, "&quot;")
                                 .replace(/'/g, "&#039;")
                                 .replace(/(https?:\/\/[^\s]+)/g, "<a target='_blank' href='$1'>$1</a>");
        }

        function showStack(elem) {
            elem.nextSibling.style.display = "inline";
            elem.parentElement.removeChild(elem);
        }

        const logger = document.getElementById('log');
        function logToWebConsole(message, color, stack) {
            if (typeof message == 'object') {
                // convert it to a string if it's an object, otherwise we just get "Object" as the output
                logger.innerHTML += `<span style="color:${color}">${escapeHtml(JSON && JSON.stringify ? JSON.stringify(message) : message)}</span>`;
            } else {
                logger.innerHTML += `<span style="color:${color}">${escapeHtml(message)}</span>`;
            }
            if(stack) {
                logger.innerHTML += `<br/><span style="cursor: pointer; text-decoration: underline; color: skyblue;" onclick="showStack(this)">Show Stack</span><span style="display: none; text-decoration: underline; color: darkgray">${stack}</span>`
            }
            logger.innerHTML += "<br/><hr/>";
            return;
        }

        // override the default console.log function with our own one that also displays it to the console on the page
        var old = console.log; // keep the old one to still log to the actual console at the end
        console.log = function (message) {
            logToWebConsole(message, "", (new Error()).stack);
            old(message);
        }

        // We also want to show errors, so override the error function too 
        var oldError = console.error;
        console.error = function (message) {
            logToWebConsole(message, "red", (new Error()).stack);
            oldError(message);
        }
        // handle errors in other scripts through our new error function
        window.onerror = function(message, source, lineNumber, colno, error) {
            console.error(`${error} in ${source} at line ${lineNumber}:${colno}`);
        };

        // and warns too
        var oldWarn = console.warn;
        console.warn = function (message) {
            logToWebConsole(message, "yellow", (new Error()).stack);
            oldWarn(message);
        }

        // run all this when we hit enter
        devConsole = document.getElementById("devConsole");
        devConsole.onkeyup = function (e) {
            if (e.key === 'Enter' || e.keyCode === 13) {
            // echo the command the user supplied
            logger.innerHTML += "> " + escapeHtml(devConsole.value) + "<br>";
            try {
                // ok I spent a stupid amount of time on this, this really shouldnt need a temporary variable...
                // *but* for some reason when just putting it directly in the +=, the other += to logger.innerHTML inside a console.log gets undone
                // I have no idea why this happens, it should just run the one in the console.log first and then the one here...
                // AND IT DOES, I put a console.log every step of the way and IT DOES DO THAT!
                // But, for some reason that I cannot figure out, on all browsers I tested, this just straight up gets undone and only the return value remains.
                // Putting it on seperate lines fixed it. I don't know why. If you know please contact me at lucas@lucasvl.nl, I really wanna know.
                const temp = eval.call(window, devConsole.value);
                // remove extra <hr/> tag possibly put there by a console.log
                if(logger.lastChild.nodeName === "HR") {logger.removeChild(logger.lastChild)}
                logger.innerHTML += "<-" + temp + "<br/><hr/>";
            }
            // catch errors in the console and log them
            catch(e) {logToWebConsole(String(e), "red", e.stack)}

            // clear the input and scroll to the bottom
            devConsole.value = "";
            logger.scrollTop = logger.scrollHeight;
            }
        };

        // dont worry, the server will only actually do this if the dev flag is set
        async function restartServer() {
            return await fetch("/restartServer");
        }

        console.log("Welcome to the Bus App integrated dev tools! for more info you can go to https://github.com/nnhs-se-projects/busapp/wiki/05.-Dev-Tools")
    </script>
<% } %>