<nav class="navbar">
  <div class="container-fluid">
    <div class="navbar-text">NNHS Bus App</div>
    <div class="collapse navbar-collapse justify-content-end" id="navbarSupportedContent">
      <ul class="navbar-nav">
        <li class="nav-item">
          <a class="nav-link button text-center" aria-current="page" href="/admin">Admin</a>
        </li>
        <li class="nav-item text-center">
          <a class="nav-link button" href="/help">Help</a>
        </li>
        <li class="nav-item text-center">
          <a class="nav-link button" style="cursor:pointer;" onclick="toggleCredits()">Credits</a>
        </li>
      </ul>
    </div>
    <button
      class="navbar-toggler"
      type="button"
      data-bs-toggle="collapse"
      data-bs-target="#navbarSupportedContent"
      aria-controls="navbarSupportedContent"
      aria-expanded="false"
      aria-label="Toggle navigation"
    >
      <span class="navbar-toggler-icon"></span>
    </button>
  </div>
</nav>  

<div class="d-flex justify-content-center w-100 mt-1">
  <div class="row announcement-nav bus-nav mt-2 text-center align-items-center justify-content-center">
      <!-- <i class="fa-solid fa-bullhorn"></i> -->
      <h3>Announcements:</h3>
      <hr>
      <p id="announcement-text"><%= data.announcement %></p>
  </div>
</div>

<div class="content-container nav-item container-fluid text-center mt-1">
  <div class="row justify-content-center dropdown-center">
    <button class="dropdown-toggle" type="button" data-bs-display="dynamic" data-bs-toggle="dropdown" data-bs-offset="0, 5" data-bs-auto-close="outside" aria-expanded="false">
    <i class="fa-solid fa-thumbtack"></i> 
    </button>
    <ul class="dropdown-menu">
      <% for(let i = 0; i < data.buses.length; i++) { %> 
          <li class = "bus-row p-1 text-center">
              <button class="pin-button" onclick="pinBus(this)"><%= data.buses[i].number %> <% if (data.buses[i].change) { %> &rarr; <%= data.buses[i].change %></span><% } %></button>
          </li>
      <% } %> 
    </ul>
  </div>
  <div class="row justify-content-center">
    <table class="pinned-bus-table text-center">
      <thead>
          <th>Bus #</th>
          <th>Status</th>
      <tbody>
      </tbody>
    </table>
  </div>
</div>


<!-- <div id = "panel-header" class = "panel-header" onclick = "togglePanelExpanded()">
    <h1 id = "pBusBanner">Pinned Bus: </h1>
</div>
<div id = "panel" class = "panel">
        <table id = "top-bus-table" class = "">
            <tbody id = "top-bus-table-body">
                <% for(let i = 0; i < data.buses.length; i++) { %> 
                    <tr class = "bus-row">
                        <td class="num-col" colspan="1"><%= data.buses[i].number %> <% if (data.buses[i].change) { %> &rarr; <%= data.buses[i].change %></span><% } %></td>
                        <td class="status-col" colspan="5"><%= data.buses[i].status ? data.buses[i].status : "Not Here" %><%= data.buses[i].time ? data.buses[i].time.toLocaleTimeString([], { timeZone: 'America/Chicago',  hour: '2-digit', minute: '2-digit', hour12: true }) : "" %></td>
                        <td class="pin-col" onclick="pinBus(this)">Pin</td>
                    </tr>
                <% } %> 
            </tbody>
        </table>
</div>    -->


<% if(data.isDev) { %>
<!-- Keep all this near the bottom, its for the testing server only to make debugging on mobile easier 
 I'm using inline styles because we won't have multiple of these on one page 
 TODO: move this to another EJS file so it can easily be included on multiple pages -->
  <div id="log" style="background-color: black; font-family: monospace; min-height: 1ch; max-height: min(35ch, 85vh); overflow: auto; margin: 10px; margin-bottom: 0; overflow-wrap: break-word; padding: 1ch; border: 2px solid darkgray; border-radius: 1ch 1ch 0 0"></div>
  <input type="text" id="devConsole" placeholder="> Input command here" style="width: calc(100% - 20px); margin-left: 10px; margin-bottom: 30px; border-radius: 0 0 1ch 1ch; padding: 0 0.25ch 0.15ch 0.25ch;"/>

  <script>
    // escapes any text and makes it safe to display in an HTML page
    // this is needed because otherwise if we console.log a button, for example, it would just display the button
    var escapeHtml = (unsafe) => {
      unsafe = String(unsafe);
      return unsafe.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }

    const logger = document.getElementById('log');
    function logToWebConsole(message, color) {
      if (typeof message == 'object') {
        // convert it to a string if it's an object, otherwise we just get "Object" as the output
        logger.innerHTML += `<span style=\"color:${color}\">${escapeHtml(JSON && JSON.stringify ? JSON.stringify(message) : message)}</span><br/><hr/>`;
      } else {
        logger.innerHTML += `<span style=\"color:${color}\">${escapeHtml(message)}</span><br/><hr/>`;
      }
      return;
    }

    // override the default console.log function with our own one that also displays it to the console on the page
    var old = console.log; // keep the old one to still log to the actual console at the end
    console.log = function (message) {
      logToWebConsole(message);
      old(message);
    }

    // We also want to show errors, so override the error function too 
    var oldError = console.error;
    console.error = function (message) {
      logToWebConsole(message, "red");
      oldError(message);
    }
    // handle errors in other scripts through our new error function
    window.onerror = function(message, source, lineNumber, colno, error) {
      console.error(`${error} in ${source} at line ${lineNumber}:${colno}`);
    };

    // and warns too
    var oldWarn = console.warn;
    console.warn = function (message) {
      logToWebConsole(message, "yellow");
      oldWarn(message);
    }

    // run all this when we hit enter
    devConsole = document.getElementById("devConsole");
    devConsole.onkeyup = function (e) {
      if (e.key === 'Enter' || e.keyCode === 13) {
        // echo the command the user supplied
        logger.innerHTML += "> " + escapeHtml(devConsole.value) + "<br>";
        try {
          // ok I spent a stupid amount of time on this, this really shouldnt need a temporary variable...
          // *but* for some reason when just putting it directly in the +=, the other += to logger.innerHTML inside a console.log gets undone
          // I have no idea why this happens, it should just run the one in the console.log first and then the one here...
          // AND IT DOES, I put a console.log every step of the way and IT DOES DO THAT!
          // But, for some reason that I cannot figure out, on all browsers I tested, this just straight up gets undone and only the return value remains.
          // Putting it on seperate lines fixed it. I don't know why. If you know please contact me at lucas@lucasvl.nl, I really wanna know.
          const temp = eval.call(window, devConsole.value);
          // remove extra <hr/> tag possibly put there by a console.log
          if(logger.lastChild.nodeName === "HR") {logger.removeChild(logger.lastChild)}
          logger.innerHTML += "<-" + temp + "<br/><hr/>";
        }
        // catch errors in the console and log them
        catch(e) {logToWebConsole(escapeHtml(e), "red")}

        // clear the input and scroll to the bottom
        devConsole.value = "";
        logger.scrollTop = logger.scrollHeight;
      }
    };

    // dont worry, the server will only actually do this if the dev flag is set
    async function restartServer() {
      return await fetch("/restartServer");
    }
  </script>
<% } %>  
<!-- Main Content /\/\/\ ----------------------------------------------->

<div id="credits">
  <i class="fa-regular fa-circle-xmark" onclick="toggleCredits()" style="position: absolute; z-index: 2; font-size: max(50%, 25px); right: 10px; top: 10px; cursor: pointer"></i>
  <div class="spacer"></div>
  <div class="starWarsContainer">
    <% for(var i = 0; i < 4; i++) { %>
      <p>Pierre Hanlet</p>
      <p>JD Piar</p>
      <p>Varun Vaid</p>
      <p>Maaz Zubair</p>
      <p>Sayee Anand</p>
      <p>Wyatt Barnes</p>
      <p>Kurt Lovisa</p>
      <p>Nolan Yee</p>
      <p>Devam Das</p>
      <p>Ronith Manikonda</p>
      <p>Everett Dombrowski</p>
      <p>Rohan Rao</p>
      <p>Lucas van Laerhoven</p>
      <p>Aidan Malana</p>
      <p>Muhammad Yulbarsov</p>
    <% } %>
  </div>
</div>

<div id="IOSnotifpopup">
  <div>
    <i
      class="fa-regular fa-circle-xmark"
      onclick="document.getElementById('IOSnotifpopup').style.display='none'"
      style="position: absolute; right: 10px; top: 10px; cursor: pointer"
    ></i>
    <h2>It appears you may be using IOS</h2>
    <p>
      IOS needs you to add the busapp to the homescreen before enabling
      notifications. If you have already added the Bus App to your homescreen
      previously, remove it and re-add it. Once you have added the Bus App to
      your home screen, press the "Enable Notifications" button from within the
      app.
    </p>
    <video
      autoplay
      muted
      loop
      style="max-width: 100%; max-height: 100vh; width: 100%"
    >
      <source src="img/ios-instructions.mp4" type="video/mp4" />
    </video>
  </div>
</div>

<!-- Update the value of <% version = 2 %> in this comment when updating the what's new popup to make it appear again on launch -->
<input type="hidden" id="whatsNewVersion" value="<%=version%>"/>
<div id="whatsNewPopup"><div> <i class="fa-regular fa-circle-xmark" onclick="hideWhatsNew(<%=version%>)" style="position: absolute; right: 10px; top: 10px; cursor: pointer"></i>
    <h2>What's New</h2>
    <ul>
        <li><p>New Designs! üñåÔ∏è</p>
            <ul>
                <li>The Bus App has a new icon and logo üé®</li>
                <li>Improved 404 page ü©π</li>
                <li>Whats next: total user interface redesign üìê</li>
            </ul>
        </li>
        <li><p>Performance Improvements And Better Reliability üïí</p>
            <ul>
                <li>Notifications should now send faster and more efficiently üîî</li>
                <li>Pinning a bus with notifications enabled now shows a loading indicator üìå</li>
                <li>Network indicator on bottom left is üü¢ for fast network, üü° for slow network, and üî¥ for offline</li>
                <li>Multiple security issues were identified and fixed üîí</li>
            </ul>
        </li>
        <li><p>Backend Improvements üßë‚Äçüîß</p>
            <ul>
                <li>New backend code ensures fewer conflicts when new changes are added ü¶æ</li>
                <li>Bug fixes in admin page make it faster and easier for staff to get you to your bus ‚è±Ô∏è</li>
            </ul>
        </li>
        <li><p>More responsive announcements üó£Ô∏è</p>
            <ul>
                <li>The announcement now updates without reloading the page üì°</li>
                <li>Fixed bug where announcement disappeared randomly ü´•</li>
            </ul>
        </li>
        <li>Have feedback or ideas? Send us an email at <a href="mailto:busappdevs@proton.me">busappdevs@proton.me</a></li>
    </ul>
    <br />
    <p>- üöç The Bus App Team</p>
    <br /><a class="generic-button" onclick="hideWhatsNew(<%=version%>)"
      >Got It!</a
    >
  </div>
</div>

<div id="networkBlocker">
    <i class="fa-solid fa-globe" style="font-size: min(30vw, 40vh); clip-path: polygon(0 0, 100% 0, 100% 100%, 20% 100%, 100% 0, 80% 0, 0 100%);"></i>
    <h3 style="font-size: min(5vw, 10vh); font-family: sans-serif; margin-top: 20px;">No Network</h3>
</div>
<div id="networkIndicator"></div>